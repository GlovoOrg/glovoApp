Рекомендации к разработке

Введение.

Думаю про принципы SOLID все уже позабыли, я сам только первые 2 помню. Перечитать их перед разработкой API не помешало бы
нам всем, там также есть и другие принципы такие как DRY(просто не повторять свой код, IDE сама даже подсказывает, что, дружище, тут
код повторяется. Решением будет вынести в общий метод, обычно с помощью wildcard решается.
------------------------------------------------------------------------------
Также про сообщение Степана от 7.01.

"Маленький совет - вынесите функционал создания/удаления/сохранения/получения
в отдельный абстрактный сервис и наследуйте остальные сервисы от него, много времени сэкономите"

Это будет, что-то типа такого

public abstract class AbstractService<T, ID> {
    protected final JpaRepository<T, ID> repository;

    public AbstractService(JpaRepository<T, ID> repository) {
        this.repository = repository;
    }
    public T create(T entity) {
        return repository.save(entity);
    }
    public T getById(ID id) {
        return repository.findById(id).orElseThrow(() ->
            new RuntimeException("Entity not found")
        );
    }
    public void delete(ID id) {
        repository.deleteById(id);
    }
}   // это шаблон, суть проста, меньше писать код будем, просто наследуемся и данные методы в наследуемом классе доступны.

----------------------------------------------------------------------------------------


1) Пожалуйста, называйте все(методы,классы,url) понятно, должен быть явный смысл в названии. Мы все в одной лодке.
   Именуйте все ресурсы во множественном числе: Плохо: /user, /product.
                                                Хорошо: /users, /products.

2) При merge /feature-... или /bug-fix-... в dev. Если возникают конфликты, посмотрите, что именно не подходит.
Да, меня самого это раздражает.

3) Методы надо дробить, если получается сложная логика в методе, надо это выносить за рамки. Нам потом это читать.

4) Давайте, указывать явные статус коды. А не просто .ok. Такое же отношение к исключением, максимально избегайте стандартных
исключений, все кастом. Ну и тело ответа в запросах тоже понятно пишем. Это все рекомендации, я и сам могу про эти моменты
забыть)

200 OK — успешная операция.
201 Created — ресурс успешно создан.
400 Bad Request — ошибка ввода данных.
404 Not Found — ресурс не найден.
все 500 Internal Server Error — ошибка сервера.
403 - ошибка авторизации

5) Пишите комментарии к своему коду, если считаете, что в будущем могут возникнуть проблемы для чтения вами, или вашими
сокомандниками.

6) Если возникают трудности в понимании или в решение задачи, то сначала поищите инфу в chatGPT, если там не понятно или
не работает(всегда проверяйте), то ищите в интернете(stackOverFlow, habr...). Если уж и там нет инфы, то спросите в чате.
Накрайняк есть всемогущий Степан и Бексултан). Крч, не стесняйтесь.

7) Для передачи данных между клиентом и сервером используйте DTO (Data Transfer Object). Не надо полные entity закидывать.
По хорошему через mapstruct надо сделать.

8) Также надо валидировать входные данные(нам же проще будет) в методах. Использовать аннотации @NonNull @Valid и тд.

на уровне контроллера

@PostMapping("/users"
    public ResponseEntity<User> createUser(@Valid @RequestBody UserCreateDTO userCreateDTO)

на уровне сервиса

 public User create(@Valid UserCreateDTO userCreateDTO) {} // Но тут надо не забыть на классе повесить @Validated
 Также можно прямо в параметрах проверить @NotNull и @NotBlank. На ютубе видос лучше посмотреть, он на мин 15.

P.s
Когда пишите новый changeset, это про insert(для тестинга). Нужно будет делать это в новом changeset. Должна быть иерархия
в очередности.

Спасибо за внимание.
